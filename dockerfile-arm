# Builder stage for compiling the Yew application
FROM rust:alpine AS builder
# Install build dependencies
RUN apk update && apk upgrade && \
    apk add --no-cache musl-dev libffi-dev zlib-dev jpeg-dev
# Install wasm target and build tools
RUN rustup target add wasm32-unknown-unknown && \
    cargo install wasm-bindgen-cli
RUN apk update && apk upgrade
# Add the Edge Community repository
RUN echo "@edge http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
# Update the package index
RUN apk update
# Install the desired package from the edge community repository
RUN apk add trunk@edge
# Add application files to the builder stage
COPY ./web/Cargo.lock ./web/Cargo.toml ./web/dev-info.md ./web/index.html ./web/tailwind.config.js ./web/Trunk.toml /app/
COPY ./web/src /app/src
COPY ./web/static /app/static
WORKDIR /app
# Initialize trunk first
RUN cd /tmp && \
    echo "" > dummy.rs && \
    trunk build dummy.rs || true
RUN cargo install --locked wasm-bindgen-cli
# Build the Yew application in release mode
RUN RUSTFLAGS="--cfg=web_sys_unstable_apis --cfg getrandom_backend=\"wasm_js\"" trunk build --features server_build --release

# Python builder stage for database setup
FROM python:3.11-alpine AS python-builder
WORKDIR /build

# Install build dependencies for PyInstaller
RUN apk add --no-cache gcc musl-dev libffi-dev openssl-dev

# Copy Python source files
COPY ./database_functions ./database_functions
COPY ./startup/setup_database_new.py ./startup/setup_database_new.py
COPY ./requirements.txt ./requirements.txt

# Install Python dependencies including PyInstaller
RUN pip install --no-cache-dir -r requirements.txt pyinstaller

# Build standalone database setup binary
RUN pyinstaller --onefile \
    --name pinepods-db-setup \
    --hidden-import psycopg \
    --hidden-import mysql.connector \
    --hidden-import cryptography \
    --hidden-import cryptography.fernet \
    --hidden-import passlib \
    --hidden-import passlib.hash \
    --hidden-import passlib.hash.argon2 \
    --hidden-import argon2 \
    --hidden-import argon2.exceptions \
    --hidden-import argon2.profiles \
    --hidden-import argon2._password_hasher \
    --add-data "database_functions:database_functions" \
    --console \
    startup/setup_database_new.py

# Final stage for setting up runtime environment
FROM alpine
# Metadata
LABEL maintainer="Collin Pendleton <collinp@collinpendleton.com>"

# Install runtime dependencies (removed Python)
RUN apk update && apk upgrade && \
    apk add --no-cache nginx tzdata openssl bash mariadb-client curl ffmpeg supervisor wget jq && \
    rm -rf /var/cache/apk/*

# Download and install latest yt-dlp binary for ARM64
RUN LATEST_VERSION=$(curl -s https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest | jq -r .tag_name) && \
    wget -O /usr/local/bin/yt-dlp "https://github.com/yt-dlp/yt-dlp/releases/download/${LATEST_VERSION}/yt-dlp_linux_aarch64" && \
    chmod +x /usr/local/bin/yt-dlp

ENV TZ=UTC
# Set environment variables
ENV APP_ROOT=/pinepods

# Copy compiled database setup binary (replaces Python dependency)
COPY --from=python-builder /build/dist/pinepods-db-setup /usr/local/bin/

# Copy wait-for-it script
COPY wait-for-it/wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh

# Copy built files from the builder stage
COPY --from=builder /app/dist /var/www/html/

# Set up application directories and files
WORKDIR /
COPY startup/startup.sh /startup.sh
RUN chmod +x /startup.sh

RUN mkdir -p /pinepods /var/log/supervisor/
COPY startup/ /pinepods/startup/
COPY clients/ /pinepods/clients/
COPY database_functions/ /pinepods/database_functions/
# Legacy cron scripts removed - background tasks now handled by internal Rust scheduler
RUN chmod +x /pinepods/startup/startup.sh

# Clean things up
RUN rm -rf \
        /var/cache/apk/* \
        /root/.cache \
        /tmp/* \
        /var/tmp/* \
        /usr/share/man \
        /usr/share/doc

# Define and set the version
ARG PINEPODS_VERSION
RUN echo "${PINEPODS_VERSION}" > /pinepods/current_version

RUN cp /usr/share/zoneinfo/UTC /etc/localtime && \
    echo "UTC" > /etc/timezone

# Configure Nginx
COPY startup/nginx.conf /etc/nginx/nginx.conf

ENTRYPOINT ["bash", "/startup.sh"]
